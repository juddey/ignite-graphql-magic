import React from 'react'
import { ApolloProvider } from 'react-apollo'
import { ApolloClient } from 'apollo-client'
import { InMemoryCache } from 'apollo-cache-inmemory'
import { HttpLink } from 'apollo-link-http'
import { onError } from 'apollo-link-error'
import { ApolloLink } from 'apollo-link'
import { GRAPHQL_API } from 'react-native-dotenv'
import { persistCache } from 'apollo-cache-persist'
import { AsyncStorage } from 'react-native'

const cache = new InMemoryCache()
persistCache({
  cache,
  storage: AsyncStorage,
})

const client = new ApolloClient({
  link: ApolloLink.from([
    onError(({ graphQLErrors, networkError }) => {
      if (graphQLErrors) {
        graphQLErrors.map(({ message, locations, path }) =>
          console.log(
            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`
          )
        )
      }
      if (networkError) console.log(`[Network error]: ${networkError}`)
    }),
    new HttpLink({
      uri: GRAPHQL_API,
      credentials: 'same-origin'
    })
  ]),
  cache: cache
})

export default function ApolloHOC (WrappedComponent) {
  return class PP extends React.Component {
    render () {
      return (
        <ApolloProvider client={client}>
          <WrappedComponent {...this.props} />
        </ApolloProvider>
      )
    }
  }
}
